plugins.withType(JavaPlugin) {
	if (git_ready) {
		jar.doFirst {
			manifest {
				 attributes(
					'Implementation-Title': project.name,
					'Implementation-Version': project.version,
					'Implementation-Vendor': 'Ca\' Foscari University of Venice',
					'Created-By': "Gradle ${gradle.gradleVersion}",
					'Build-Revision': git_cid,
					'Build-Tag': git_tag,
					'Build-Branch': git_branch,
					'Build-Clean': git_is_clean,
					'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
					'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
					'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
				)
			}
		}
	}
}

compileJava {
    options.debug = true
    options.debugOptions.debugLevel = "source,lines,vars"
  	sourceCompatibility = '11'
  	targetCompatibility = '11'
}

compileTestJava {
    options.debug = true
    options.debugOptions.debugLevel = "source,lines,vars"
  	sourceCompatibility = '11'
  	targetCompatibility = '11'
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
	if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options {
        links 'https://docs.oracle.com/javase/11/docs/api/'
    }
}

test {
	filter {
		includeTestsMatching 'it.unive.lisa.*'
		excludeTestsMatching 'it.unive.lisa.cron.*'
	}
	
	jacoco {
		// we don't care about coverage of excpetion classes
		// most of the times they only define constructors
		// that invoke super constructors...
        excludes = ['**/*Exception*']
    }
}

tasks.register('cron', Test) {
    description = 'Runs cron tests'
    group = 'verification'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    
    filter {
    	failOnNoMatchingTests false
		includeTestsMatching 'it.unive.lisa.cron.*'
	}
}

tasks.register('update-cron', Test) {
    description = 'Runs cron tests, updating expected results of failed ones'
    group = 'verification'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    systemProperty "lisa.cron.update", "true"
    
    filter {
    	failOnNoMatchingTests false
		includeTestsMatching 'it.unive.lisa.cron.*'
	}
}

tasks.register('allTests') {
    description = 'Runs unit tests and cron tests'
    group = 'verification'
	dependsOn test, cron
}

tasks.register('completeBuild') {
    description = 'build + cron + checkCodeStyle'
    group = 'build'
	dependsOn build, cron, checkCodeStyle
}

jacocoTestReport {
	// we do not depend also on cron for now
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
    	// this will effectively hide exception classes from the report
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/*Exception*')
        }))
    }
}